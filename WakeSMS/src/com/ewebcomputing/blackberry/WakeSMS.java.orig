package com.ewebcomputing.blackberry;
import java.io.IOException;

import javax.microedition.io.Connector;
import javax.wireless.messaging.Message;
import javax.wireless.messaging.TextMessage;
import javax.wireless.messaging.MessageConnection;
import javax.wireless.messaging.MessageListener;

import net.rim.blackberry.api.invoke.Invoke;
import net.rim.blackberry.api.invoke.MessageArguments;
import net.rim.blackberry.api.mail.Folder;
import net.rim.blackberry.api.mail.Session;
import net.rim.blackberry.api.mail.Store;
import net.rim.blackberry.api.mail.event.FolderEvent;
import net.rim.blackberry.api.mail.event.FolderListener;
import net.rim.blackberry.api.options.OptionsManager;
import net.rim.device.api.system.Application;
import net.rim.device.api.system.ApplicationManager;
import net.rim.device.api.system.Backlight;

import net.rim.device.api.ui.component.Dialog;

public class WakeSMS extends Application	implements MessageListener, FolderListener	{
    /**
     * Entry point for application
     * @param args Command line arguments (not used)
     */ 
    public static void main(String[] args){
    	WakeSMS theApp = new WakeSMS();       
    	WakeSMSOptionsProvider provider = new WakeSMSOptionsProvider();            
    	OptionsManager.registerOptionsProvider(provider);
        theApp.enterEventDispatcher();
    }
    BackgroundApp ba = null;
    MessageConnection mSMSConnection = null;
    public WakeSMS()	{ 
    	WakeSMSProperties props = WakeSMSProperties.fetch();
    	if(!props.isEnabled())	return;
    	ba = new BackgroundApp();
    	ba.start();
    	try	{
    	mSMSConnection = (MessageConnection) Connector.open("sms://:0");
    	mSMSConnection.setMessageListener(this);   
    	Store store = Session.waitForDefaultSession().getStore();
    	Folder inbox = store.getFolder("Inbox");    	
    	inbox.addFolderListener(this);
    	} catch(Exception e){
    		e.printStackTrace();
    	}    	
    }

    public void notifyIncomingMessage(MessageConnection arg) {		
    	try	{    	
    	//Logger.getInstance().log("Balive: receiving message");
    	ApplicationManager.getApplicationManager().unlockSystem();
    	Backlight.enable(true, 30);    	
    	Invoke.invokeApplication(Invoke.APP_TYPE_MESSAGES, new MessageArguments());
    	/*Message msg = arg.receive();   
    	//System.out.println("Message type "+ msg.getClass().getName());
    	TextMessage tmsg = null;
    	Logger.getInstance().log("Balive: type "+ msg.getClass().getName());
    	if(msg instanceof TextMessage) tmsg = (TextMessage)msg;    	
    	//ApplicationManager.getApplicationManager().unlockSystem();
    	MessageArguments ma = new MessageArguments(tmsg);    	
    	Invoke.invokeApplication(Invoke.APP_TYPE_MESSAGES, ma);*/
    	}
    	catch(Exception e)	{
    		//Logger.getInstance().err(e.getMessage());
    		e.printStackTrace();
    	}
    	catch(Error e)	{
    		//Logger.getInstance().err(e.getMessage());
    		e.printStackTrace();
    	}		
	}
	
	 //The thread that will run in the background.
    private class BackgroundApp extends Thread
    {
         boolean stopThread = false;
         public synchronized void stop() 
         { 
              stopThread = true;
         }

         public void run() 
         {
              while (!stopThread) 
              { 
                   
                   try 
                   { 
                        sleep(5000); 
                   } 
                   catch (Exception e)
                   { 
                        //Exception handling would go here. 
                   } 
              } 
         } 
    } 
    //Stop the thread on exit. 
    protected void onExit() 
    { 
         ba.stop(); 
    }

	public void messagesAdded(FolderEvent e) {		
		ApplicationManager.getApplicationManager().unlockSystem();
    	Backlight.enable(true, 30);
    	Invoke.invokeApplication(Invoke.APP_TYPE_MESSAGES, new MessageArguments());
		
	}

	public void messagesRemoved(FolderEvent e) {
		// TODO Auto-generated method stub
		
	} 
}
